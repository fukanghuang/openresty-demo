#负载均衡 weigth参数表示权值,权值越高被分配到的几率越大
#默认是以轮询的方式实现负载均衡，这种方式中，每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除。
#另外一种方式是ip_hash：每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。
upstream webservers {
  ip_hash;
  server 192.168.29.118:8000 weight=2;
  server 127.0.0.1:8000 weight=1;
}

server {
  listen                   8080;
  server_name              127.0.0.1_80;

  proxy_connect_timeout 600;
  proxy_read_timeout 600;
  proxy_send_timeout 600;

  #负载均衡
  location / {
    proxy_set_header  X-Real-IP  $remote_addr;
    proxy_pass      http://webservers;
  }
}

# 块定义了虚拟主机
server {
  # 监听端口
  listen                   8000;
  # 监听域名
  server_name              127.0.0.1_8000;

  index index.html index.htm;
  root  "www/";

  #模板文件从哪加载
  set $template_root "../template";

  # 合并静态文件
  location ~ .*\.(js|css|woff|ttf|svg)$ {
    root "www/";
    content_by_lua_file "lualib/lua-nginx_static_merger.lua";
  }


  # 是用来为匹配的 URI 进行配置
  # =:精确匹配 ^~:以某个常规字符串开头，理解为匹配 url 路径即可
  # ~:区分大小写的正则匹配 ~*:不区分大小写的正则匹配 /:通用匹配，任何请求都会匹配到
  # 优先级 = > ^~ > 按文件中顺序的正则匹配 > /
  location ~* "^/(\d{6,12})\.html$" {
    # 准入阶段完成参数验证
    access_by_lua_file  "lua/access_check.lua";
    set $skuId $1;
    default_type text/html;
    charset utf-8;
    content_by_lua_file "lua/product_controller.lua";
  }

  # api示例
  location ~ ^/api/([-_a-zA-Z0-9/]+).json {
    set $path $1;
    default_type text/html;
    charset utf-8;
    access_by_lua_file  "lua/api/protocal_decode.lua";
    content_by_lua_file "lua/api/$path.lua";
    body_filter_by_lua_file  "lua/api/protocal_encode.lua";
  }


  location = /lua {
    default_type text/html;
    charset utf-8;
    content_by_lua_block {
      ngx.say("content_by_lua_block ...");
    }
  }

  location /baidu {
    resolver 8.8.8.8;
    default_type text/html;
    charset utf-8;
    content_by_lua_block {
      local http = require "resty.http"
      local httpc = http.new()
      local res,err = httpc:request_uri("http://www.baidu.com")

      if res.status == ngx.HTTP_OK then
        ngx.say(res.body)
      else
        ngx.exit(res.status)
      end
    }
  }

  location /test {
    default_type text/html;
    charset utf-8;
    content_by_lua_file "lua/unit/test_example.lua";
  }
}